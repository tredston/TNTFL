"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * TNTFL
 * Table Football Ladder
 *
 * OpenAPI spec version: 5.5.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = "http://foos.cfl.io".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * GamesApi - fetch parameter creator
 * @export
 */
exports.GamesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Add a game.
         * @summary Add a game
         * @param {string} redPlayer The player on red
         * @param {number} redScore The red team score
         * @param {string} bluePlayer The player on blue
         * @param {number} blueScore The blue team score
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGame(redPlayer, redScore, bluePlayer, blueScore, options = {}) {
            // verify required parameter 'redPlayer' is not null or undefined
            if (redPlayer === null || redPlayer === undefined) {
                throw new RequiredError('redPlayer', 'Required parameter redPlayer was null or undefined when calling addGame.');
            }
            // verify required parameter 'redScore' is not null or undefined
            if (redScore === null || redScore === undefined) {
                throw new RequiredError('redScore', 'Required parameter redScore was null or undefined when calling addGame.');
            }
            // verify required parameter 'bluePlayer' is not null or undefined
            if (bluePlayer === null || bluePlayer === undefined) {
                throw new RequiredError('bluePlayer', 'Required parameter bluePlayer was null or undefined when calling addGame.');
            }
            // verify required parameter 'blueScore' is not null or undefined
            if (blueScore === null || blueScore === undefined) {
                throw new RequiredError('blueScore', 'Required parameter blueScore was null or undefined when calling addGame.');
            }
            const localVarPath = `/game/add/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (redPlayer !== undefined) {
                localVarQueryParameter['redPlayer'] = redPlayer;
            }
            if (redScore !== undefined) {
                localVarQueryParameter['redScore'] = redScore;
            }
            if (bluePlayer !== undefined) {
                localVarQueryParameter['bluePlayer'] = bluePlayer;
            }
            if (blueScore !== undefined) {
                localVarQueryParameter['blueScore'] = blueScore;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a game.
         * @summary Get a game
         * @param {number} gameId Timestamp of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(gameId, options = {}) {
            // verify required parameter 'gameId' is not null or undefined
            if (gameId === null || gameId === undefined) {
                throw new RequiredError('gameId', 'Required parameter gameId was null or undefined when calling getGame.');
            }
            const localVarPath = `/game/{gameId}/json`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get games.
         * @summary Get games
         * @param {number} begin Timestamp to filter from.
         * @param {number} end Timestamp to filter to.
         * @param {number} [includeDeleted] Use value &#39;1&#39; to include deleted games.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGames(begin, end, includeDeleted, options = {}) {
            // verify required parameter 'begin' is not null or undefined
            if (begin === null || begin === undefined) {
                throw new RequiredError('begin', 'Required parameter begin was null or undefined when calling getGames.');
            }
            // verify required parameter 'end' is not null or undefined
            if (end === null || end === undefined) {
                throw new RequiredError('end', 'Required parameter end was null or undefined when calling getGames.');
            }
            const localVarPath = `/games/{begin}/{end}/json`
                .replace(`{${"begin"}}`, encodeURIComponent(String(begin)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get shared games.
         * @summary Get shared games
         * @param {string} player1 Name of player 1
         * @param {string} player2 Name of player 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadToHeadGames(player1, player2, options = {}) {
            // verify required parameter 'player1' is not null or undefined
            if (player1 === null || player1 === undefined) {
                throw new RequiredError('player1', 'Required parameter player1 was null or undefined when calling getHeadToHeadGames.');
            }
            // verify required parameter 'player2' is not null or undefined
            if (player2 === null || player2 === undefined) {
                throw new RequiredError('player2', 'Required parameter player2 was null or undefined when calling getHeadToHeadGames.');
            }
            const localVarPath = `/headtohead/{player1}/{player2}/games/json`
                .replace(`{${"player1"}}`, encodeURIComponent(String(player1)))
                .replace(`{${"player2"}}`, encodeURIComponent(String(player2)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get game punditry.
         * @summary Get game punditry
         * @param {string} at CSV of timestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPunditry(at, options = {}) {
            // verify required parameter 'at' is not null or undefined
            if (at === null || at === undefined) {
                throw new RequiredError('at', 'Required parameter at was null or undefined when calling getPunditry.');
            }
            const localVarPath = `/pundit/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (at !== undefined) {
                localVarQueryParameter['at'] = at;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent games.
         * @summary Get recent games
         * @param {number} [limit] Maximum number of games to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecent(limit, options = {}) {
            const localVarPath = `/recent/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Predict the outcome of a game.
         * @summary Predict the outcome of a game
         * @param {number} redElo Elo of red player
         * @param {number} blueElo Elo of blue player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predict(redElo, blueElo, options = {}) {
            // verify required parameter 'redElo' is not null or undefined
            if (redElo === null || redElo === undefined) {
                throw new RequiredError('redElo', 'Required parameter redElo was null or undefined when calling predict.');
            }
            // verify required parameter 'blueElo' is not null or undefined
            if (blueElo === null || blueElo === undefined) {
                throw new RequiredError('blueElo', 'Required parameter blueElo was null or undefined when calling predict.');
            }
            const localVarPath = `/predict/{redElo}/{blueElo}/json`
                .replace(`{${"redElo"}}`, encodeURIComponent(String(redElo)))
                .replace(`{${"blueElo"}}`, encodeURIComponent(String(blueElo)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GamesApi - functional programming interface
 * @export
 */
exports.GamesApiFp = function (configuration) {
    return {
        /**
         * Add a game.
         * @summary Add a game
         * @param {string} redPlayer The player on red
         * @param {number} redScore The red team score
         * @param {string} bluePlayer The player on blue
         * @param {number} blueScore The blue team score
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGame(redPlayer, redScore, bluePlayer, blueScore, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).addGame(redPlayer, redScore, bluePlayer, blueScore, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a game.
         * @summary Get a game
         * @param {number} gameId Timestamp of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(gameId, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).getGame(gameId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get games.
         * @summary Get games
         * @param {number} begin Timestamp to filter from.
         * @param {number} end Timestamp to filter to.
         * @param {number} [includeDeleted] Use value &#39;1&#39; to include deleted games.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGames(begin, end, includeDeleted, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).getGames(begin, end, includeDeleted, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get shared games.
         * @summary Get shared games
         * @param {string} player1 Name of player 1
         * @param {string} player2 Name of player 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadToHeadGames(player1, player2, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).getHeadToHeadGames(player1, player2, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get game punditry.
         * @summary Get game punditry
         * @param {string} at CSV of timestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPunditry(at, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).getPunditry(at, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get recent games.
         * @summary Get recent games
         * @param {number} [limit] Maximum number of games to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecent(limit, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).getRecent(limit, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Predict the outcome of a game.
         * @summary Predict the outcome of a game
         * @param {number} redElo Elo of red player
         * @param {number} blueElo Elo of blue player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predict(redElo, blueElo, options) {
            const localVarFetchArgs = exports.GamesApiFetchParamCreator(configuration).predict(redElo, blueElo, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * GamesApi - factory interface
 * @export
 */
exports.GamesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Add a game.
         * @summary Add a game
         * @param {string} redPlayer The player on red
         * @param {number} redScore The red team score
         * @param {string} bluePlayer The player on blue
         * @param {number} blueScore The blue team score
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGame(redPlayer, redScore, bluePlayer, blueScore, options) {
            return exports.GamesApiFp(configuration).addGame(redPlayer, redScore, bluePlayer, blueScore, options)(fetch, basePath);
        },
        /**
         * Get a game.
         * @summary Get a game
         * @param {number} gameId Timestamp of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(gameId, options) {
            return exports.GamesApiFp(configuration).getGame(gameId, options)(fetch, basePath);
        },
        /**
         * Get games.
         * @summary Get games
         * @param {number} begin Timestamp to filter from.
         * @param {number} end Timestamp to filter to.
         * @param {number} [includeDeleted] Use value &#39;1&#39; to include deleted games.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGames(begin, end, includeDeleted, options) {
            return exports.GamesApiFp(configuration).getGames(begin, end, includeDeleted, options)(fetch, basePath);
        },
        /**
         * Get shared games.
         * @summary Get shared games
         * @param {string} player1 Name of player 1
         * @param {string} player2 Name of player 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadToHeadGames(player1, player2, options) {
            return exports.GamesApiFp(configuration).getHeadToHeadGames(player1, player2, options)(fetch, basePath);
        },
        /**
         * Get game punditry.
         * @summary Get game punditry
         * @param {string} at CSV of timestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPunditry(at, options) {
            return exports.GamesApiFp(configuration).getPunditry(at, options)(fetch, basePath);
        },
        /**
         * Get recent games.
         * @summary Get recent games
         * @param {number} [limit] Maximum number of games to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecent(limit, options) {
            return exports.GamesApiFp(configuration).getRecent(limit, options)(fetch, basePath);
        },
        /**
         * Predict the outcome of a game.
         * @summary Predict the outcome of a game
         * @param {number} redElo Elo of red player
         * @param {number} blueElo Elo of blue player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predict(redElo, blueElo, options) {
            return exports.GamesApiFp(configuration).predict(redElo, blueElo, options)(fetch, basePath);
        },
    };
};
/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
class GamesApi extends BaseAPI {
    /**
     * Add a game.
     * @summary Add a game
     * @param {} redPlayer The player on red
     * @param {} redScore The red team score
     * @param {} bluePlayer The player on blue
     * @param {} blueScore The blue team score
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    addGame(redPlayer, redScore, bluePlayer, blueScore, options) {
        return exports.GamesApiFp(this.configuration).addGame(redPlayer, redScore, bluePlayer, blueScore, options)(this.fetch, this.basePath);
    }
    /**
     * Get a game.
     * @summary Get a game
     * @param {} gameId Timestamp of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getGame(gameId, options) {
        return exports.GamesApiFp(this.configuration).getGame(gameId, options)(this.fetch, this.basePath);
    }
    /**
     * Get games.
     * @summary Get games
     * @param {} begin Timestamp to filter from.
     * @param {} end Timestamp to filter to.
     * @param {} [includeDeleted] Use value &#39;1&#39; to include deleted games.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getGames(begin, end, includeDeleted, options) {
        return exports.GamesApiFp(this.configuration).getGames(begin, end, includeDeleted, options)(this.fetch, this.basePath);
    }
    /**
     * Get shared games.
     * @summary Get shared games
     * @param {} player1 Name of player 1
     * @param {} player2 Name of player 2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getHeadToHeadGames(player1, player2, options) {
        return exports.GamesApiFp(this.configuration).getHeadToHeadGames(player1, player2, options)(this.fetch, this.basePath);
    }
    /**
     * Get game punditry.
     * @summary Get game punditry
     * @param {} at CSV of timestamps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getPunditry(at, options) {
        return exports.GamesApiFp(this.configuration).getPunditry(at, options)(this.fetch, this.basePath);
    }
    /**
     * Get recent games.
     * @summary Get recent games
     * @param {} [limit] Maximum number of games to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getRecent(limit, options) {
        return exports.GamesApiFp(this.configuration).getRecent(limit, options)(this.fetch, this.basePath);
    }
    /**
     * Predict the outcome of a game.
     * @summary Predict the outcome of a game
     * @param {} redElo Elo of red player
     * @param {} blueElo Elo of blue player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    predict(redElo, blueElo, options) {
        return exports.GamesApiFp(this.configuration).predict(redElo, blueElo, options)(this.fetch, this.basePath);
    }
}
exports.GamesApi = GamesApi;
/**
 * LadderApi - fetch parameter creator
 * @export
 */
exports.LadderApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLadder(showInactive, players, options = {}) {
            const localVarPath = `/ladder/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (showInactive !== undefined) {
                localVarQueryParameter['showInactive'] = showInactive;
            }
            if (players !== undefined) {
                localVarQueryParameter['players'] = players;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} begin Timestamp to filter from.
         * @param {number} end Timestamp to filter to.
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLadderBetween(begin, end, showInactive, players, options = {}) {
            // verify required parameter 'begin' is not null or undefined
            if (begin === null || begin === undefined) {
                throw new RequiredError('begin', 'Required parameter begin was null or undefined when calling getLadderBetween.');
            }
            // verify required parameter 'end' is not null or undefined
            if (end === null || end === undefined) {
                throw new RequiredError('end', 'Required parameter end was null or undefined when calling getLadderBetween.');
            }
            const localVarPath = `/ladder/{begin}/{end}/json`
                .replace(`{${"begin"}}`, encodeURIComponent(String(begin)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (showInactive !== undefined) {
                localVarQueryParameter['showInactive'] = showInactive;
            }
            if (players !== undefined) {
                localVarQueryParameter['players'] = players;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {string} [previousGames] CSV of speculative games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speculate(showInactive, players, previousGames, options = {}) {
            const localVarPath = `/speculate/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (showInactive !== undefined) {
                localVarQueryParameter['showInactive'] = showInactive;
            }
            if (players !== undefined) {
                localVarQueryParameter['players'] = players;
            }
            if (previousGames !== undefined) {
                localVarQueryParameter['previousGames'] = previousGames;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * LadderApi - functional programming interface
 * @export
 */
exports.LadderApiFp = function (configuration) {
    return {
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLadder(showInactive, players, options) {
            const localVarFetchArgs = exports.LadderApiFetchParamCreator(configuration).getLadder(showInactive, players, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} begin Timestamp to filter from.
         * @param {number} end Timestamp to filter to.
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLadderBetween(begin, end, showInactive, players, options) {
            const localVarFetchArgs = exports.LadderApiFetchParamCreator(configuration).getLadderBetween(begin, end, showInactive, players, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {string} [previousGames] CSV of speculative games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speculate(showInactive, players, previousGames, options) {
            const localVarFetchArgs = exports.LadderApiFetchParamCreator(configuration).speculate(showInactive, players, previousGames, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * LadderApi - factory interface
 * @export
 */
exports.LadderApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLadder(showInactive, players, options) {
            return exports.LadderApiFp(configuration).getLadder(showInactive, players, options)(fetch, basePath);
        },
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} begin Timestamp to filter from.
         * @param {number} end Timestamp to filter to.
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLadderBetween(begin, end, showInactive, players, options) {
            return exports.LadderApiFp(configuration).getLadderBetween(begin, end, showInactive, players, options)(fetch, basePath);
        },
        /**
         * Get the ladder.
         * @summary Get the ladder
         * @param {number} [showInactive] Include inactive players
         * @param {number} [players] Include detailed player info
         * @param {string} [previousGames] CSV of speculative games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speculate(showInactive, players, previousGames, options) {
            return exports.LadderApiFp(configuration).speculate(showInactive, players, previousGames, options)(fetch, basePath);
        },
    };
};
/**
 * LadderApi - object-oriented interface
 * @export
 * @class LadderApi
 * @extends {BaseAPI}
 */
class LadderApi extends BaseAPI {
    /**
     * Get the ladder.
     * @summary Get the ladder
     * @param {} [showInactive] Include inactive players
     * @param {} [players] Include detailed player info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LadderApi
     */
    getLadder(showInactive, players, options) {
        return exports.LadderApiFp(this.configuration).getLadder(showInactive, players, options)(this.fetch, this.basePath);
    }
    /**
     * Get the ladder.
     * @summary Get the ladder
     * @param {} begin Timestamp to filter from.
     * @param {} end Timestamp to filter to.
     * @param {} [showInactive] Include inactive players
     * @param {} [players] Include detailed player info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LadderApi
     */
    getLadderBetween(begin, end, showInactive, players, options) {
        return exports.LadderApiFp(this.configuration).getLadderBetween(begin, end, showInactive, players, options)(this.fetch, this.basePath);
    }
    /**
     * Get the ladder.
     * @summary Get the ladder
     * @param {} [showInactive] Include inactive players
     * @param {} [players] Include detailed player info
     * @param {} [previousGames] CSV of speculative games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LadderApi
     */
    speculate(showInactive, players, previousGames, options) {
        return exports.LadderApiFp(this.configuration).speculate(showInactive, players, previousGames, options)(this.fetch, this.basePath);
    }
}
exports.LadderApi = LadderApi;
/**
 * PlayersApi - fetch parameter creator
 * @export
 */
exports.PlayersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get number of active players.
         * @summary Get number of active players
         * @param {string} [at] CSV of timestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActive(at, options = {}) {
            const localVarPath = `/activeplayers/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (at !== undefined) {
                localVarQueryParameter['at'] = at;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get per player stats.
         * @summary Get per player stats
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerPlayerStats(player, options = {}) {
            // verify required parameter 'player' is not null or undefined
            if (player === null || player === undefined) {
                throw new RequiredError('player', 'Required parameter player was null or undefined when calling getPerPlayerStats.');
            }
            const localVarPath = `/player/{player}/perplayerstats/json`
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get player info.
         * @summary Get player info
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(player, options = {}) {
            // verify required parameter 'player' is not null or undefined
            if (player === null || player === undefined) {
                throw new RequiredError('player', 'Required parameter player was null or undefined when calling getPlayer.');
            }
            const localVarPath = `/player/{player}/json`
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get player's achievements.
         * @summary Get player's achievements
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerAchievements(player, options = {}) {
            // verify required parameter 'player' is not null or undefined
            if (player === null || player === undefined) {
                throw new RequiredError('player', 'Required parameter player was null or undefined when calling getPlayerAchievements.');
            }
            const localVarPath = `/player/{player}/achievements/json`
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get player's games.
         * @summary Get player's games
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerGames(player, options = {}) {
            // verify required parameter 'player' is not null or undefined
            if (player === null || player === undefined) {
                throw new RequiredError('player', 'Required parameter player was null or undefined when calling getPlayerGames.');
            }
            const localVarPath = `/player/{player}/games/json`
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PlayersApi - functional programming interface
 * @export
 */
exports.PlayersApiFp = function (configuration) {
    return {
        /**
         * Get number of active players.
         * @summary Get number of active players
         * @param {string} [at] CSV of timestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActive(at, options) {
            const localVarFetchArgs = exports.PlayersApiFetchParamCreator(configuration).getActive(at, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get per player stats.
         * @summary Get per player stats
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerPlayerStats(player, options) {
            const localVarFetchArgs = exports.PlayersApiFetchParamCreator(configuration).getPerPlayerStats(player, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get player info.
         * @summary Get player info
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(player, options) {
            const localVarFetchArgs = exports.PlayersApiFetchParamCreator(configuration).getPlayer(player, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get player's achievements.
         * @summary Get player's achievements
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerAchievements(player, options) {
            const localVarFetchArgs = exports.PlayersApiFetchParamCreator(configuration).getPlayerAchievements(player, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get player's games.
         * @summary Get player's games
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerGames(player, options) {
            const localVarFetchArgs = exports.PlayersApiFetchParamCreator(configuration).getPlayerGames(player, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * PlayersApi - factory interface
 * @export
 */
exports.PlayersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get number of active players.
         * @summary Get number of active players
         * @param {string} [at] CSV of timestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActive(at, options) {
            return exports.PlayersApiFp(configuration).getActive(at, options)(fetch, basePath);
        },
        /**
         * Get per player stats.
         * @summary Get per player stats
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerPlayerStats(player, options) {
            return exports.PlayersApiFp(configuration).getPerPlayerStats(player, options)(fetch, basePath);
        },
        /**
         * Get player info.
         * @summary Get player info
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(player, options) {
            return exports.PlayersApiFp(configuration).getPlayer(player, options)(fetch, basePath);
        },
        /**
         * Get player's achievements.
         * @summary Get player's achievements
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerAchievements(player, options) {
            return exports.PlayersApiFp(configuration).getPlayerAchievements(player, options)(fetch, basePath);
        },
        /**
         * Get player's games.
         * @summary Get player's games
         * @param {string} player ID of the player
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerGames(player, options) {
            return exports.PlayersApiFp(configuration).getPlayerGames(player, options)(fetch, basePath);
        },
    };
};
/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
class PlayersApi extends BaseAPI {
    /**
     * Get number of active players.
     * @summary Get number of active players
     * @param {} [at] CSV of timestamps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    getActive(at, options) {
        return exports.PlayersApiFp(this.configuration).getActive(at, options)(this.fetch, this.basePath);
    }
    /**
     * Get per player stats.
     * @summary Get per player stats
     * @param {} player ID of the player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    getPerPlayerStats(player, options) {
        return exports.PlayersApiFp(this.configuration).getPerPlayerStats(player, options)(this.fetch, this.basePath);
    }
    /**
     * Get player info.
     * @summary Get player info
     * @param {} player ID of the player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    getPlayer(player, options) {
        return exports.PlayersApiFp(this.configuration).getPlayer(player, options)(this.fetch, this.basePath);
    }
    /**
     * Get player's achievements.
     * @summary Get player's achievements
     * @param {} player ID of the player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    getPlayerAchievements(player, options) {
        return exports.PlayersApiFp(this.configuration).getPlayerAchievements(player, options)(this.fetch, this.basePath);
    }
    /**
     * Get player's games.
     * @summary Get player's games
     * @param {} player ID of the player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    getPlayerGames(player, options) {
        return exports.PlayersApiFp(this.configuration).getPlayerGames(player, options)(this.fetch, this.basePath);
    }
}
exports.PlayersApi = PlayersApi;
/**
 * StatsApi - fetch parameter creator
 * @export
 */
exports.StatsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get global stats.
         * @summary Get global stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options = {}) {
            const localVarPath = `/stats/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StatsApi - functional programming interface
 * @export
 */
exports.StatsApiFp = function (configuration) {
    return {
        /**
         * Get global stats.
         * @summary Get global stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options) {
            const localVarFetchArgs = exports.StatsApiFetchParamCreator(configuration).getStats(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * StatsApi - factory interface
 * @export
 */
exports.StatsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get global stats.
         * @summary Get global stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options) {
            return exports.StatsApiFp(configuration).getStats(options)(fetch, basePath);
        },
    };
};
/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
class StatsApi extends BaseAPI {
    /**
     * Get global stats.
     * @summary Get global stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    getStats(options) {
        return exports.StatsApiFp(this.configuration).getStats(options)(this.fetch, this.basePath);
    }
}
exports.StatsApi = StatsApi;
